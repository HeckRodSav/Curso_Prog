\chapter{Sintaxe básica}\label{cap.sintax}
\section{O que é sintaxe}

Sintaxe é o \textquotedblleft{componente do sistema linguístico que determina as relações formais que interligam os constituintes da sentença, atribuindo-lhe uma estrutura}\textquotedblright \cite{houaiss2009dicio}.
Ou seja, é a maneira que as palavras de uma determinada linguagem se combinam formando sentenças.

No contexto de programação, sintaxe é o conjunto de regras estruturais que determinam o formato da linguagens.
Como qualquer outra linguagem, o C++ tem um conjunto de regras a ser seguido para que possa ser entendido pelo compilador.

\section{Os blocos de código e o ponto-e-vírgula}

Qualquer linha do código que realize uma ação delimitada e determinada é denominada \emph{comando} ou \emph{instrução}.
Todo comando precisa de um caractere especial para ser dividido dos demais.
Na criação da linguagem foi escolhido o ponto-e-vírgula (\basicCode{;}), provavelmente pelo lado poético de terminar uma oração delimitada sem finalizar a frase, o que é coerente, tendo em vista que o programa é uma série de comandos bem delimitadas que montam uma instrução mais complexa.
É importante lembrar sempre: todo comando deve apresentar um ponto-e-vírgula (\basicCode{;}) em sequência.

Em qualquer lugar é possível criar regiões de código com algumas propriedades especiais, estas regiões são denominadas \emph{blocos de código}.
Sua principal função é agrupar comandos, de tal forma que juntos formem uma instrução mais complexa.
Pode-se dizer que os comandos são como as instruções passo-a-passo para a confecção de um bolo, e o bloco de código seja a própria expressão \emph{faça um bolo}.
Um bloco de código é delimitado pelos caracteres de chave esquerda (\basicCode{\{}) para abrir o bloco e direita (\basicCode{\}}) para fechá-lo.

Um bloco de código pode ser criado dentro de outro.
É recomendado que, a cada novo bloco, um aumento no recuo da margem do programa seja feito, mantendo todo comando dentro do bloco alinhado, permitindo a fácil visualização do início e fim do bloco de código.
Normalmente utiliza-se um caractere de tabulação, e este é o nome do processo de formatação visual do código.
Também é possível encontrar programadores que utilizem espaços em branco para o processo de tabulação, porém não é recomendado.
/
\begin{center}
    \noindent\lstinline[basicstyle={\Huge\ttfamily}]|{;}|
\end{center}

\section{A sensibilidade de caixa e os caracteres ASCII}

A \emph{sensibilidade de caixa} é uma das características mais comuns e linguagens de programação modernas, embora possa parecer incoerente em linguagem coloquial, quando escrita pode ser a diferença entre um programa que é compilável ou não, essa sensibilidade é denominada \textit{case sensitive}.
De maneira simples, a caixa alta é o conjunto de caracteres de letras maiúsculas e a caixa baixa o conjunto de caracteres de letras minúsculas.
Então, se em um lugar do código existir um termo como \basicCode{palavra}, em outro o termo \basicCode{Palavra} e em um terceiro lugar o termo \basicCode{PALAVRA}, o compilador reconhecerá como três símbolos diferentes, isto é, completamente distintos e sem qualquer relação, mesmo que em um contexto coloquial sejam exatamente o mesmo termo.

Por se tratar de uma linguagem relativamente antiga, o C++ tem uma limitação nos caracteres processáveis, então alguns caracteres especiais não são aceitos pelo compilador, gerando um erro. Ainda que a sintaxe esteja perfeita e nenhum erro de lógica exista, caracteres como \texttt{ã} ou \texttt{ç} não são tolerados.
Somente os caracteres da tabela ASCII são aceitos, esta pode ser consultada no apêndice \ref{appendix.ASCII}.
Por isso ainda, é comum que programadores escolham escrever seus programas usando termos em linguagens que não apresentem esse caracteres, como inglês, grego ou até latim.
Não é incomum encontrar termos como \basicCode{alpha} e \basicCode{beta}, ou talvez \basicCode{fungi} e \basicCode{monera} como estes termos.

\begin{center}
    \noindent\lstinline[basicstyle={\Huge\ttfamily},mathescape]|A$\neq$a|
\end{center}

\section{Comentários}

Ao longo do desenvolvimento de programas, é comum que o programador dê nome a entidades no programa, nomes que, em programas maiores, podem se confundir.
Para evitar isso, o programador pode criar uma tabela externa, como um arquivo de texto ou uma folha num caderno, mas isso se torna cansativo e não progride caso o desenvolvedor não tome um tempo especial para isso.
Para garantir que todos os nomes de entidades no programa sejam utilizados da forma correta, uma simples anotação no lugar onde são criados seria suficiente.

Todas as partes de processamento também ficam mais simples de entender quando há uma anotação a seu respeito explicando seu funcionamento.
Tais anotações servem para explicar o programa e são consideradas uma boa prática de programação.
Pode parecer algo desnecessário para programas pequenos, mas durante a rotina de desenvolvimento de software, não é raro passar um longo período de tempo sem editar alguns segmentos do programa e, depois de tanto tempo, é comum se esquecer o que esta parte é faz e como ela o faz.
Um simples comentário pode ser o suficiente para que não sejam perdidas horas de análise de código afim de simplesmente lembrar qual o objetivo deste segmento.

Em C++, existem duas formas de criar comentários, a mais comum utilizando duas barras (\lstinline[commentstyle=\ttfamily]{//}), depois desta sequência, o restante da linha é considerada comentário.

\begin{center}
    \noindent\lstinline[commentstyle={\Huge\ttfamily}]|//Linear|
\end{center}

A segunda forma, muito utilizada para manter cópias de códigos alternativos no arquivo de código (também chamado de  arquivo fonte ou código fonte), é semelhante a declaração de blocos, com um delimitador de direita e outro de esquerda, para abertura e fechamento respectivo.
O início do bloco é delimitado com o par barra-asterisco (\lstinline[commentstyle=\ttfamily]{/*}) e o fim por asterisco-barra (\lstinline[commentstyle=\ttfamily]{*/}).

\begin{center}
    \noindent\lstinline[commentstyle={\Huge\ttfamily}]|/*Blocular*/|
\end{center}

Os comentários devem respeitar o uso de caracteres ASCII, caracteres especiais continuam proibidos, porém qualquer outra coisa pode ser escrita sem maiores problemas.

\section{Um pequeno exemplo de sintaxe}

O código \ref{code.minimal.basic.sintax} apresenta alguns exemplos de sintaxe.
Note a forma que a palavra \basicCode{int} não está com a coloração diferenciada como no código \ref{code.minimal}.

\lstinputlisting[caption={Exemplos de sintaxe no código mínimo}, label=code.minimal.basic.sintax]{../code/minimal/basic.sintax.cpp}
